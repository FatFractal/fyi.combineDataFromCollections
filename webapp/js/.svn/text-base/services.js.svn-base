'use strict';

/* Services */
function FatFractalQ($q, scope) {
    var self = this;

    self.ff = new FatFractal();

    self.setDebug = self.ff.setDebug;
    self.getDebug = self.ff.getDebug;

    self.setBaseUrl = self.ff.setBaseUrl;
    self.setAutoLoadRefs = self.ff.setAutoLoadRefs;
    self.setSimulateCookies = self.ff.setSimulateCookies;
    self.loggedIn = self.ff.loggedIn;
    self.loggedInUser = self.ff.loggedInUser;

    self.register = function(email, firstName, lastName, password) {
        var deferred = $q.defer();

        var rr = new RegisterRequest();
        rr.userName = email;
        rr.email = email;
        rr.firstName = firstName;
        rr.lastName = lastName;
        rr.password = password;

        self.ff.register(rr, function(result) {
            scope.$apply(function() { deferred.resolve(result) });
        }, function(code, result) {
            scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
        });

        return deferred.promise;
    };

    self.login = function(username, password) {
        var deferred = $q.defer();
        self.ff.login(username, password, function(result) {
            scope.$apply(function() { deferred.resolve(result) });
        }, function(code, result) {
            scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
        });
        return deferred.promise;
    };

    self.logout = function() {
        var deferred = $q.defer();
        self.ff.logout(function() {
            scope.$apply(function() { deferred.resolve() });
        }, function(code, result) {
            scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
        });
        return deferred.promise;
    };

    self.getObjFromUri = function(uri, loadRefs) {
        loadRefs = loadRefs || false;

        var deferred = $q.defer();

        self.ff.getObjFromUri(uri, function(result) {
            scope.$apply(function() {
                if (loadRefs) {
                    deferred.resolve(self.loadReferences(result));
                } else {
                    deferred.resolve(result)
                }
            });
        }, function(code, result) {
            scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
        });

        return deferred.promise;
    };

    self.getArrayFromUri = function(uri, loadRefs) {
        loadRefs = loadRefs || false;

        var deferred = $q.defer();

        self.ff.getArrayFromUri(uri, function(result) {
            var resolved;
            if (loadRefs) {
                var arr = [];
                for (var i = 0; i < result.length; i++) {
                    arr.push(self.loadReferences(result[i]));
                }
                resolved = $q.all(arr);
            } else {
                resolved = result;
            }
            scope.$apply(function() { deferred.resolve(resolved) });
        }, function(code, result) {
            var msg;
            if (result) {
                msg = JSON.parse(result).statusMessage;
            } else {
                msg = "Unknown error";
            }
            scope.$apply(function() { deferred.reject({code: code, message: msg}) });
        });

        return deferred.promise;
    };

    self.getObjFromExtension = function(extensionName) {
        var deferred = $q.defer();
        self.ff.getObjFromExtension(extensionName, function(result) {
            scope.$apply(function() { deferred.resolve(result) });
        }, function(code, result) {
            scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
        });
        return deferred.promise;
    };

    self.getArrayFromExtension = function(extensionName) {
        var deferred = $q.defer();
        self.ff.getArrayFromExtension(extensionName, function(result) {
            scope.$apply(function() { deferred.resolve(result) });
        }, function(code, result) {
            scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
        });
        return deferred.promise;
    };

    self.postObjToExtension = function(obj, extensionName) {
        var deferred = $q.defer();
        self.ff.postObjToExtension(clean(obj), extensionName, function(result) {
            scope.$apply(function() { deferred.resolve(result) });
        }, function(code, result) {
            scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
        });
        return deferred.promise;
    };

    self.loadReference = function(obj, memberName) {
        if (!obj || !obj.ffRefs) return obj;

        var ref = null;
        for (var i = 0; i < obj.ffRefs.length; i++) {
            if (obj.ffRefs[i].type == 'FFO' && obj.ffRefs[i].name == memberName) {
                ref = obj.ffRefs[i];
                break;
            }
        }

        var deferred = $q.defer();
        self.ff.getObjFromUri(obj.ffUrl + "/" + ref.name,
            function(result) {
                scope.$apply(function() { deferred.resolve({ name: ref.name, val: result }) });
            },
            function(code, result) {
                scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
            });

        return deferred.promise.then(function(ref) {
            obj[ref.name] = ref.val;
            return obj;
        });
    };

    self.loadReferences = function(obj) {
        if (!obj || !obj.ffRefs) return obj;

        var promises = [];
        var names = [];
        for (var i = 0; i < obj.ffRefs.length; i++) {
            var ref = obj.ffRefs[i];
            if (ref.type !== 'FFO') continue;

            var promise = self.getObjFromUri(obj.ffUrl + "/" + ref.name, true);
            promises.push(promise);
            names.push(ref.name);
        }

        var allPromise = $q.all(promises);
        return allPromise.then(function(refs) {
            for (var i = 0; i < refs.length; i++) {
                obj[names[i]] = refs[i];
            }
            return obj;
        });
    };

    self.grabBagGetAll = function(parentObj, gbName) {
        var deferred = $q.defer();
        self.ff.grabBagGetAll(parentObj, gbName, function(result) {
            scope.$apply(function() { deferred.resolve(result) });
        }, function(code, result) {
            scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
        });
        return deferred.promise;
    };

    /* similar to above, but returns promise to the object, not the grabbag array */
    self.loadGrabbag = function(obj, gbName, mappedName) {
        mappedName = mappedName || gbName;

        var deferred = $q.defer();

        self.ff.grabBagGetAll(obj, gbName, function(result) {
            obj[mappedName] = result;
            scope.$apply(function() { deferred.resolve(obj) });
        }, function(code, result) {
            scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
        });

        return deferred.promise;
    };

    self.createObjAtUri = function(obj, collectionUri) {
        var deferred = $q.defer();

        self.ff.createObjAtUri(clean(obj), collectionUri, function(result) {
            scope.$apply(function() { deferred.resolve(result) });
        }, function(code, result) {
            scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
        });

        return deferred.promise;
    };

    self.updateObj = function(obj) {
        var deferred = $q.defer();
        self.ff.updateObj(clean(obj), function(result) {
            scope.$apply(function() { deferred.resolve(result) });
        }, function(code, result) {
            scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
        });
        return deferred.promise;
    };

    self.deleteObj = function(obj) {
        var deferred = $q.defer();
        self.ff.deleteObj(clean(obj), function(result) {
            scope.$apply(function() { deferred.resolve(result) });
        }, function(code, result) {
            scope.$apply(function() { deferred.reject({code: code, message: JSON.parse(result).statusMessage}) });
        });
        return deferred.promise;
    };

    self.forgetObj = function(obj) {
        self.ff.forgetObj(obj);
    };

    function clean(obj) {
        // TODO: not sure this is kosher ...
        delete obj.$$hashKey;
        return obj;
    }
}

angular.module('ffConsole.services', []).
    value('version', '0.1').
    factory('FatFractal', function($q, $rootScope) {
        var ff = new FatFractalQ($q, $rootScope);
        ff.setBaseUrl("http://localhost:8080/console");
        ff.setSimulateCookies(true);
        ff.setAutoLoadRefs(false);
        ff.loggedIn();  // force FF to look for session info
        return ff;
    });
